recruit_plot_list <- lapply(mods, recruitment_habsuit_plot_func)
# name plots
plot_name_func <- function(x){
paste0(x, "_recruitment_habsuit_corr_plot")
}
plot_names <- sapply(mods, plot_name_func)
# set file paths
file_path_name <- function(x){
paste0("/Users/jenniferbigman/My Drive/NOAA AFSC Postdoc/Pcod Bering Sea Habitat Suitability/Pcod-Bering-Sea/output/plots/correlation plots/", x)
}
full_names <- sapply(plot_names, file_path_name)
# save plots to file path
ggsave_func2 <- function(x,y){
ggsave(plot = x,
file = paste(y,".png",sep=""),
width = 7, height = 7, units = "in")
}
mapply(ggsave_func2, x = recruit_plot_list, y = full_names)
# abundance plots
abund_habsuit <- abund_habsuit %>%
tidyr::unite("age_mod", age, model, remove = F)
abundance_habsuit_plot_func <- function(x){
new_dat <- abund_habsuit %>% dplyr::filter(age_mod == x)
plot <- ggscatter(new_dat, x = "annual_spawning_hab_suit", y = "log_raw_abundance",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
title = paste("age", x),
xlab = "index of spawning\nhabitat suitability", ylab = "log(abundance)") +
white_theme()
plot
}
# apply function
age_mods <- unique(abund_habsuit$age_mod)
abund_plot_list <- sapply(age_mods, abundance_habsuit_plot_func)
#	mods <- unique(abundance_dat_long$model)
#	ages <- unique(abundance_dat_long$age)
#abundance_plot_lists <- mapply(abundance_habsuit_plot_func,
#										 x = ages,
#										 y = mods,
#										 SIMPLIFY = FALSE)
# name plots
plot_name_func <- function(x){
paste0(x, "_abundance_habsuit_corr_plot")
}
plot_names <- sapply(age_mods, plot_name_func)
# set file paths
file_path_name <- function(x){
paste0("/Users/jenniferbigman/My Drive/NOAA AFSC Postdoc/Pcod Bering Sea Habitat Suitability/Pcod-Bering-Sea/output/plots/correlation plots/", x)
}
full_names <- sapply(plot_names, file_path_name)
# save plots to file path
ggsave_func2 <- function(x,y){
ggsave(plot = x,
file = paste(y,".png",sep=""),
width = 7, height = 7, units = "in")
}
mapply(ggsave_func2, x = abund_plot_list, y = full_names)
# load each time
#### libraries ####
library(here)
library(rnaturalearth)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(data.table)
library(sf)
library(forcats)
library(lubridate)
library(patchwork)
library(raster)
library(rgdal)
library(stars)
library(marmap)
library(zoo)
library(RColorBrewer)
library(beepr)
library(mapdata)
library(zoo)
library(runner)
library(tidync)
library(cowplot)
library(scales)
library(ggtext)
library(ggpubr)
# turn off spherical geometry
sf_use_s2(FALSE)
# create object for greater than or equal to symbol
symbol<-"\u2265"
#### load and transform data ####
# hindcast data
ROMS_hindcast_dat  <- fread(file = "./data/ROMS_hindcast_dat.csv") %>% filter(., year != 2021)
# projected data
ROMS_projected_dat <- fread(file = "./data/ROMS_projected_dat.csv") %>%
mutate(latitude = Lat,
longitude = Lon)
# add name of month for plotting
ROMS_projected_dat$month_name <- NA
ROMS_projected_dat$month_name[ROMS_projected_dat$month == 1] <- "January"
ROMS_projected_dat$month_name[ROMS_projected_dat$month == 2] <- "February"
ROMS_projected_dat$month_name[ROMS_projected_dat$month == 3] <- "March"
ROMS_projected_dat$month_name[ROMS_projected_dat$month == 4] <- "April"
#
#	## add in area and depth
#
#	area_depth_df <- ROMS_hindcast_dat %>%
#		dplyr::select(latitude, longitude, depth, area_km2)
#
#	ROMS_projected_dat <- merge(ROMS_projected_dat, area_depth_df,
#															 by = c("latitude", "longitude"))
#
# reorder for plotting
ROMS_hindcast_dat$month_name <- factor(ROMS_hindcast_dat$month_name)
ROMS_hindcast_dat$month_name <- fct_reorder(ROMS_hindcast_dat$month_name,
ROMS_hindcast_dat$month)
ROMS_projected_dat$month_name <- factor(ROMS_projected_dat$month_name)
ROMS_projected_dat$month_name <- fct_reorder(ROMS_projected_dat$month_name,
ROMS_projected_dat$month)
# convert to a shapefile
ROMS_hindcast_dat_sf <- ROMS_hindcast_dat %>%
st_as_sf(coords = c("long_not_360", "latitude"), crs = 4326, remove = FALSE)
ROMS_projected_dat_sf <- ROMS_projected_dat %>%
mutate(longitude = Lon,
latitude = Lat,
long_not_360 = case_when(
longitude >= 180 ~ longitude - 360,
longitude < 180 ~ longitude)) %>%
st_as_sf(coords = c("long_not_360", "latitude"), crs = 4326, remove = FALSE)
#### load map ####
world_map_data <- ne_countries(scale = "medium", returnclass = "sf")
#### plotting function ####
ggsave_func <- function(x,y){
ggsave(plot = x,
file = paste(y,".png",sep=""),
width = 3, height = 3, units = "in")
}
# habitat suitability index
yearly_hab_dat_hind <- ROMS_hindcast_dat %>%
group_by(year) %>%
summarise(annual_spawning_hab_suit = mean(sp_hab_suit))
#### correlation between habitat suitability index and area ####
# area 	#### by year #### each grid cell counted only once
#### hindcasts ####
c_area_hind_dat <- ROMS_hindcast_dat %>%
filter(sp_hab_suit >= 0.9)
c_area_hind_dat_sum <- c_area_hind_dat %>%
group_by(latitude, longitude, year) %>%
distinct(across(c(latitude, longitude)), .keep_all = TRUE)
c_area_hind_dat_sum_yr <- c_area_hind_dat_sum %>%
group_by(year) %>%
summarize(area = sum(area_km2)) %>%
mutate(sp_hab_threshold = "core")
# potential habitat = sum of area where sps >= 0.5
p_area_hind_dat <- ROMS_hindcast_dat %>%
filter(sp_hab_suit >= 0.5)
p_area_hind_dat_sum <- p_area_hind_dat %>%
group_by(latitude, longitude, year) %>%
distinct(across(c(latitude, longitude)), .keep_all = TRUE)
p_area_hind_dat_sum_yr <- p_area_hind_dat_sum %>%
group_by(year) %>%
summarize(area = sum(area_km2)) %>% ## avg per cell across a given time period
mutate(sp_hab_threshold = "potential")
# join area with habitat data
core_area_habsuit <- merge(c_area_hind_dat_sum_yr, yearly_hab_dat_hind)
potential_area_habsuit <- merge(p_area_hind_dat_sum_yr, yearly_hab_dat_hind)
## correlation plots
core_area_habsuit_plot <-
ggscatter(core_area_habsuit, x = "area", y = "annual_spawning_hab_suit",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
xlab = "core area", ylab = "index of spawning\nhabitat suitability") +
white_theme()
ggsave("./output/plots/correlation plots/core_area_habsuit.png",
core_area_habsuit_plot,
width = 5, height = 5, units = "in")
potential_area_habsuit_plot <-
ggscatter(potential_area_habsuit, x = "area", y = "annual_spawning_hab_suit",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
xlab = "potential area", ylab = "index of spawning\nhabitat suitability") +
white_theme()
ggsave("./output/plots/correlation plots/potential_area_habsuit.png",
potential_area_habsuit_plot,
width = 5, height = 5, units = "in")
### plotting themes
# theme for white background, one plot only
white_theme <- function() {
theme_bw() +
theme(legend.position = c()) +
theme(
axis.text=element_text(size= 12, colour = "black"),
axis.title= element_text(size=16),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(linetype = 1, size= 1, fill = NA))
}
# black theme
black_theme <- function() {
theme(legend.position = c(),
legend.background = element_rect(fill = "black"),
axis.text=element_text(size= 12, colour = "white"),
axis.title= element_text(size=16, color = "white"),
axis.line = element_line(color = "white"),
axis.ticks = element_line(colour = "white"),
legend.title = element_text(color = "white"),
legend.text = element_text(color = "white"),
panel.background = element_rect(fill = "black"),
panel.grid = element_blank(),
plot.background = element_rect(fill = "black", color = "black"))
}
# black theme no leg
black_theme_no_leg <- function() {
theme(legend.position = "none",
legend.background = element_rect(fill = "black"),
axis.text=element_text(size= 12, colour = "white"),
axis.title= element_text(size=16, color = "white"),
axis.line = element_line(color = "white"),
axis.ticks = element_line(colour = "white"),
legend.title = element_text(color = "white"),
legend.text = element_text(color = "white"),
panel.background = element_rect(fill = "black"),
panel.grid = element_blank(),
plot.background = element_rect(fill = "black", color = "black"))
}
# black background
black_map_theme <- function() {
theme(legend.position = c(),
legend.background = element_rect(fill = "black"),
axis.text=element_text(size= 12, colour = "white"),
axis.title= element_text(size=16, color = "white"),
axis.line = element_line(color = "white"),
axis.ticks = element_line(colour = "white"),
legend.title = element_text(color = "white"),
legend.text = element_text(color = "white"),
panel.background = element_rect(fill = "black"),
plot.background = element_rect(fill = "black", color = "black"),
legend.title.align = 0.5)
}
# no legend
black_map_theme_no_legend <- function() {
theme(legend.position = "none",
legend.background = element_rect(fill = "black"),
axis.text=element_text(size= 12, colour = "white"),
axis.title= element_text(size=16, color = "white"),
axis.line = element_line(color = "white"),
axis.ticks = element_line(colour = "white"),
legend.title = element_text(color = "white"),
legend.text = element_text(color = "white"),
panel.background = element_rect(fill = "black"),
plot.background = element_rect(fill = "black", color = "black"),
legend.title.align = 0.5)
}
# faceting theme
facet_theme <- function(){
theme_bw() +
theme(
legend.position = c(),
strip.text = element_text(size = 14, face = "bold"),
strip.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(fill = NA, color = "grey50"),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
legend.title.align=0.5)
}
# theme for multiplots, 2 or 3 plots, one row
pos1_theme <- function() {
theme_bw() +
theme(legend.position = c()) +
theme(
axis.text = element_text(size = 12, colour = "black"),
axis.title = element_text(size = 16),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(linetype = 1, size= 1, fill = NA))
}
pos2n_theme <- function() {
theme_bw() +
theme(legend.position = c()) +
theme(
axis.text.x = element_text(size = 12, colour = "black"),
axis.title.x = element_text(size = 16),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(linetype = 1, size= 1, fill = NA))
}
# theme for multiplots, two rows
pos1r1_theme <- function() {
theme_bw() +
theme(legend.position = c()) +
theme(
axis.text.y = element_text(size = 12, colour = "black"),
axis.title.y = element_text(size = 16),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.title.x = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(linetype = 1, size= 1, fill = NA))
}
pos2r1n_theme <- function() {
theme_bw() +
theme(legend.position = c()) +
theme(
axis.ticks = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(linetype = 1, size= 1, fill = NA))
}
pos1r2_theme <- function() {
theme_bw() +
theme(legend.position = c()) +
theme(
axis.text = element_text(size = 12, colour = "black"),
axis.title = element_text(size = 16),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(linetype = 1, size= 1, fill = NA))
}
pos2r2n_theme <- function() {
theme_bw() +
theme(legend.position = c()) +
theme(
axis.text.x = element_text(size = 12, colour = "black"),
axis.title.x = element_text(size = 14),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(linetype = 1, size= 1, fill = NA))
}
## shortcut plotting
#plot1 <- MR_only_tree + theme(plot.margin = unit(c(0.2, 0, 0, 0.2), "in"))
#
#plot3 <- endotherm_slope_MR +
#         ggtitle("Endotherms") +
#         theme(plot.title = element_text(size = 12, hjust = 0.5,  face = "bold"))
#
#plot3 <- plot3 + theme(plot.margin = unit(c(0.2, 0, 0, -0.05), "in"))
#
#plot5 <- ectotherm_slope_MR  +
#         ggtitle("Ectotherms") +
#         theme(plot.title = element_text(size = 12, hjust = 0.5, face = "bold"))
#
#plot5 <- plot5 + theme(plot.margin = unit(c(0.2, 0.2, 0, -0.05), "in"))
#
#Figure3_top <- plot1 + plot3 + plot5 + plot_layout(ncol =3, widths = c(3, 1, 1))
#
#plot2 <- RSA_only_tree + theme(plot.margin = unit(c(-0.05, 0, 0.2, 0.2), "in"))
#
#plot4 <- endotherm_slope_RSA + theme(plot.margin = unit(c(-0.05, 0, 0.2, -0.05), "in"))
#
#plot6 <- ectotherm_slope_RSA + theme(plot.margin = unit(c(-0.05, 0.2, 0.2, -0.05), "in"))
#
#Figure3_bot <- plot2 + plot4 + plot6 + plot_layout(ncol =3, widths = c(3, 1, 1))
#
#Figure3 <- (Figure3_top) / (Figure3_bot)
#
#ggsave(path = here("plots/PNAS/"), filename = "Figure3.tiff",
#       plot = Figure3,
#       height = 7.5, width = 10, units = "in")
#
# habitat suitability index
yearly_hab_dat_hind <- ROMS_hindcast_dat %>%
group_by(year) %>%
summarise(annual_spawning_hab_suit = mean(sp_hab_suit))
#### correlation between habitat suitability index and area ####
# area 	#### by year #### each grid cell counted only once
#### hindcasts ####
c_area_hind_dat <- ROMS_hindcast_dat %>%
filter(sp_hab_suit >= 0.9)
c_area_hind_dat_sum <- c_area_hind_dat %>%
group_by(latitude, longitude, year) %>%
distinct(across(c(latitude, longitude)), .keep_all = TRUE)
c_area_hind_dat_sum_yr <- c_area_hind_dat_sum %>%
group_by(year) %>%
summarize(area = sum(area_km2)) %>%
mutate(sp_hab_threshold = "core")
# potential habitat = sum of area where sps >= 0.5
p_area_hind_dat <- ROMS_hindcast_dat %>%
filter(sp_hab_suit >= 0.5)
p_area_hind_dat_sum <- p_area_hind_dat %>%
group_by(latitude, longitude, year) %>%
distinct(across(c(latitude, longitude)), .keep_all = TRUE)
p_area_hind_dat_sum_yr <- p_area_hind_dat_sum %>%
group_by(year) %>%
summarize(area = sum(area_km2)) %>% ## avg per cell across a given time period
mutate(sp_hab_threshold = "potential")
# join area with habitat data
core_area_habsuit <- merge(c_area_hind_dat_sum_yr, yearly_hab_dat_hind)
potential_area_habsuit <- merge(p_area_hind_dat_sum_yr, yearly_hab_dat_hind)
## correlation plots
core_area_habsuit_plot <-
ggscatter(core_area_habsuit, x = "area", y = "annual_spawning_hab_suit",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
xlab = "core area", ylab = "index of spawning\nhabitat suitability") +
white_theme()
ggsave("./output/plots/correlation plots/core_area_habsuit.png",
core_area_habsuit_plot,
width = 5, height = 5, units = "in")
potential_area_habsuit_plot <-
ggscatter(potential_area_habsuit, x = "area", y = "annual_spawning_hab_suit",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
xlab = "potential area", ylab = "index of spawning\nhabitat suitability") +
white_theme()
ggsave("./output/plots/correlation plots/potential_area_habsuit.png",
potential_area_habsuit_plot,
width = 5, height = 5, units = "in")
recruitment_dat <- read_csv(here("./data/SAFE_Pcod_EBS_2021_Recruits.csv")) %>%
na.omit() %>%
mutate(raw_recruits = recruits * 1000,
log_raw_recruits = log(raw_recruits))
abundance_dat <- read_csv(here("./data/SAFE_Pcod_EBS_2021_Abundance.csv")) %>%
na.omit()
abundance_dat_long <- abundance_dat %>% gather(key = "age", abundance, "0":"4") %>%
mutate(raw_abundance = abundance * 1000,
log_raw_abundance = log(raw_abundance))
# prelim plots
recruitment_plot <- ggplot(recruitment_dat) +
geom_point(aes(x = year, y = log_raw_recruits, color = model)) +
white_theme()
abundance_plot <- ggplot(abundance_dat_long) +
geom_point(aes(x = year, y = log_raw_abundance, color = age, shape = model)) +
white_theme()
recruitment_plot
abundance_plot
abundance_plot_func <- function(x){
plot <- ggplot(abundance_dat_long) +
geom_point(aes(x = year, y = log_raw_abundance, color = model),
data = . %>% filter(age == x)) +
ggtitle(paste("age", x)) +
white_theme()
plot
}
ages <- unique(abundance_dat_long$age)
plot_list <- lapply(ages, abundance_plot_func)
years_recruit <- (min(recruitment_dat$year):max(recruitment_dat$year))
hab_suit_recruit <- yearly_hab_dat_hind %>% filter(year %in% years_recruit)
recruit_habsuit <- merge(hab_suit_recruit, recruitment_dat, by = "year")
years_abund <- (min(abundance_dat_long$year):max(abundance_dat_long$year))
hab_suit_abund <- yearly_hab_dat_hind %>% filter(year %in% years_abund)
abund_habsuit <- merge(hab_suit_abund, abundance_dat_long, by = "year")
recruitment_habsuit_plot_func <- function(x){
new_dat <- recruit_habsuit %>% filter(model == x)
plot <- ggscatter(new_dat, x = "annual_spawning_hab_suit", y = "log_raw_recruits",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
title = x,
xlab = "index of spawning\nhabitat suitability", ylab = "log(# recruits)") +
white_theme()
plot
}
# apply function
mods <- unique(recruit_habsuit$model)
recruit_plot_list <- lapply(mods, recruitment_habsuit_plot_func)
# name plots
plot_name_func <- function(x){
paste0(x, "_recruitment_habsuit_corr_plot")
}
plot_names <- sapply(mods, plot_name_func)
# set file paths
file_path_name <- function(x){
paste0("/Users/jenniferbigman/My Drive/NOAA AFSC Postdoc/Pcod Bering Sea Habitat Suitability/Pcod-Bering-Sea/output/plots/correlation plots/", x)
}
full_names <- sapply(plot_names, file_path_name)
# save plots to file path
ggsave_func2 <- function(x,y){
ggsave(plot = x,
file = paste(y,".png",sep=""),
width = 7, height = 7, units = "in")
}
mapply(ggsave_func2, x = recruit_plot_list, y = full_names)
abund_habsuit <- abund_habsuit %>%
tidyr::unite("age_mod", age, model, remove = F)
abundance_habsuit_plot_func <- function(x){
new_dat <- abund_habsuit %>% dplyr::filter(age_mod == x)
plot <- ggscatter(new_dat, x = "annual_spawning_hab_suit", y = "log_raw_abundance",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
title = paste("age", x),
xlab = "index of spawning\nhabitat suitability", ylab = "log(abundance)") +
white_theme()
plot
}
# apply function
age_mods <- unique(abund_habsuit$age_mod)
abund_plot_list <- lapply(age_mods, abundance_habsuit_plot_func)
# name plots
plot_name_func <- function(x){
paste0(x, "_abundance_habsuit_corr_plot")
}
plot_names <- sapply(age_mods, plot_name_func)
# set file paths
file_path_name <- function(x){
paste0("/Users/jenniferbigman/My Drive/NOAA AFSC Postdoc/Pcod Bering Sea Habitat Suitability/Pcod-Bering-Sea/output/plots/correlation plots/", x)
}
full_names <- sapply(plot_names, file_path_name)
# save plots to file path
ggsave_func2 <- function(x,y){
ggsave(plot = x,
file = paste(y,".png",sep=""),
width = 7, height = 7, units = "in")
}
mapply(ggsave_func2, x = abund_plot_list, y = full_names)
